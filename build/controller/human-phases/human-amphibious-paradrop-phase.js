import{joinIterables,xdialogConfirm}from"../../utils.js";import{LandUnit,NavalUnit,Paratrooper,SupplyUnit}from"../../model/units.js";import{UnitCombat}from"../../model/combat.js";import HexMarker from"../../view/markers/hex-marker.js";import LeftPanel from"../../view/left-panel.js";import UnitMarker from"../../view/markers/unit-marker.js";export default class HumanAmphibiousParadropPhase{#e;#t=null;#a=new Set;#s=new Set;#i=()=>{};constructor(e){this.#e=e}async run(){this.#n(),HexMarker.onhexclick=e=>this.#o(e),await new Promise((e=>this.#i=e)),HexMarker.onhexclick=null}#o(e){const t=e.controller();if(null===t)return void Toastify({text:"You can only do amphibious assaults and paradrops in coastal hexes."}).showToast();if(t.partnership()===this.#e)return void Toastify({text:"You can't do amphibious assaults and paradrops in hexes you already control."}).showToast();if(e.landUnits().some((e=>e.owner.partnership()===this.#e)))return void Toastify({text:"You have already done a successful amphibious assault or paradrop in this hex."}).showToast();const a=new Set(e.navalUnits().flatMap((e=>e.embarkedUnits().values())).filter((e=>e instanceof LandUnit))),s=new Set(e.airUnits().flatMap((e=>e.embarkedUnits().values())).filter((e=>e instanceof Paratrooper)));if(0===a.size&&0===s.size)return void Toastify({text:"You don't have any units that can do amphibious assaults or paradrops in this hex."}).showToast();this.#n(),LeftPanel.clear(),LeftPanel.appendParagraph("Click on the units you want to do an amphibious assault and/or paradrop with."),this.#t=e,HexMarker.colorHex(e,"purple");const i=document.createElement("div");a.size>0&&(LeftPanel.appendParagraph("Units eligible for amphibious assault:"),LeftPanel.appendElement(this.#r(a,this.#a,i))),s.size>0&&(LeftPanel.appendParagraph("Units eligible for amphibious assault:"),LeftPanel.appendElement(this.#r(s,this.#s,i))),this.#l(i),LeftPanel.appendElement(i),LeftPanel.setNextButtonClick("To results",(()=>this.#p())),LeftPanel.showCancelButton("Cancel assault",(()=>this.#n()))}#d(){return[...this.#e.landUnits().filter((e=>null!==e.embarkedOn()&&(e.embarkedOn()instanceof NavalUnit||e instanceof Paratrooper)&&e.hex().controller()?.partnership()===this.#e.opponent()))].length>0}#r(e,t,a){const s=document.createElement("div");for(let i of e){const e=UnitMarker.get(i).createCopyImage(!0);e.onclick=()=>{t.has(i)?(t.delete(i),e.classList.remove("selected")):i.canEnterHexWithinStackingLimits(this.#t,this.#h())?(t.add(i),e.classList.add("selected")):Toastify({text:"This unit can't do an amphibious assault or paradrop in this hex due to stacking limits. If you want to select this unit, deselect another unit first."}).showToast(),this.#l(a)},s.appendChild(e)}return s}#l(e){if(0===this.#a.size&&0===this.#s.size)e.style.display="none";else{e.style.display="";const t=UnitCombat.amphibiousParadropSuccessProbability(this.#a,this.#s);e.textContent=`Probability for succes: ${Math.round(100*t)}%`}}#n(){LeftPanel.clear(),LeftPanel.appendParagraph("Click on a hex to do an amphibious assault and/or paradrop in that hex."),LeftPanel.setNextButtonClick("To combat",(async()=>{this.#d()&&!await xdialogConfirm("End amphibious/paradrop phase?","You still have units that are eligible for amphibious assault or paradrop. Do you really want to skip this phase?")||this.#i()})),LeftPanel.hideCancelButton(),null!==this.#t&&HexMarker.uncolorHex(this.#t),this.#t=null,this.#a=new Set,this.#s=new Set}async#p(){const e=this.#t;if(null===e||this.#a.size+this.#s.size===0)return void Toastify({text:"You must select units to do an amphibious assault or paradrop."}).showToast();if(joinIterables(this.#a,this.#s).every((e=>e instanceof SupplyUnit)))return void Toastify({text:"At least one non-supply unit must participate in the assault."}).showToast();if(joinIterables(this.#a,this.#s).some((e=>e.outOfSupply())))return void Toastify({text:"Units that are out of supply can't do amphibious assaults or paradrops."}).showToast();LeftPanel.clear(),LeftPanel.hideCancelButton();UnitCombat.runAmphibiousParadrop(this.#a,this.#s)?LeftPanel.appendParagraph("Assault succeeded."):LeftPanel.appendParagraph("Assault failed."),HexMarker.updateMarkers(e);for(let t of e.units())UnitMarker.get(t).update();await LeftPanel.waitForNextButtonPressed("Continue amphibious/paradrop phase"),this.#n()}#h(){return joinIterables(this.#a,this.#s)}}