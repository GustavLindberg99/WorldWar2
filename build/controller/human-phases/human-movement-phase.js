import{joinIterables,sortNumber,xdialogConfirm}from"../../utils.js";import{Hex}from"../../model/mapsheet.js";import{Partnership}from"../../model/partnership.js";import{Countries}from"../../model/countries.js";import{AirUnit,Armor,Carrier,LandUnit,NavalUnit}from"../../model/units.js";import{Phase}from"../../model/phase.js";import HexMarker from"../../view/markers/hex-marker.js";import InfoBubble from"../../view/info/info-bubble.js";import LeftPanel from"../../view/left-panel.js";import MoveUnitListener from"../../view/markers/move-unit-listener.js";import UnitMarker from"../../view/markers/unit-marker.js";export default class HumanMovementPhase{passedHexes=new Map;partnership;#e;#t;#n=document.createElement("div");#i;#s;bubbleHoveredOver=!1;#a=null;#r=null;#o=null;#l=new Map;#h=[];constructor(e){this.partnership=e,this.#e=this.partnership===Partnership.Allies&&Phase.current===Phase.AxisSecondMovement||this.partnership===Partnership.Axis&&Phase.current===Phase.AlliedSecondMovement,this.#t=new Set(this.partnership.units().filter((e=>e instanceof AirUnit&&e.based||e instanceof NavalUnit&&e.inPort))),this.#i=new Map(this.partnership.units().filter((e=>e.embarkedUnits().size>0)).map((e=>[e,new Set(e.embarkedUnits())]))),this.#s=Hex.allHexes.filter((e=>e.airbaseCapacity()>0||e.navalUnits().some((e=>e.owner.partnership()===this.partnership&&e instanceof Carrier))))}async run(e){switch(Phase.current){case Phase.AxisFirstMovement:case Phase.AlliedFirstMovement:LeftPanel.appendParagraph("During this phase, air units may move up to their full movement allowance, but if they don't end this phase based, movement points used during this phase can't be used during the second movement phase. If they can't reach a friendly base with the remaining movement points during the second movement phase they will be eliminated."),LeftPanel.appendParagraph("Land units may move their full movement allowance. Armor units that have done a successful overrun may ignore enemy control zones when moving."),LeftPanel.appendParagraph("Naval units may move their full movement allowance.");break;case Phase.AxisSecondMovement:case Phase.AlliedSecondMovement:LeftPanel.appendParagraph("During this phase, unbased air units may use any movement points that they haven't used during your first movement phase. Based air units may move their full movement allowance regardless of whether they have moved previously this turn. Any air unit that does not end this movement phase on a friendly base will be eliminated."),[...this.#d()].length>0&&(LeftPanel.appendBox("Unbased air units",["These units will be eliminated if they don't return to a base.",this.#n]),this.#u()),this.#e||(LeftPanel.appendParagraph("Land units that have not moved during the first movement phase or attacked this turn may either move their full movement allowance or move by rail. Armor units that attacked during the combat phase may move their full movement allowance regardless of whether they have moved previously this turn."),LeftPanel.appendParagraph("Naval units may move their full movement allowance regardless of whether they have moved or attacked previously this turn."));break;case Phase.AxisInterception:case Phase.AlliedInterception:break;default:throw new Error("The current phase is not a movement phase.")}for(let e of this.partnership.units()){const t=UnitMarker.get(e),n=t.createMoveUnitListener(!0);this.#m(e,n),this.#l.set(t,n)}InfoBubble.onshowembarkedunit=(e,t)=>{const n=new MoveUnitListener(e,t,!0);this.#m(e,n)};const t=Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement;await LeftPanel.waitForNextButtonPressed(e,(()=>!t||(!([...this.#d()].length>0)||xdialogConfirm("Lose unbased air units?","You still have unbased air units. If they don't return to a friendly base, they will be eliminated.<br/><br/>Do you really want to continue?"))));for(let[e,t]of this.passedHexes)if(e instanceof LandUnit)for(let n of t){n.setController(e.owner,!1),HexMarker.updateMarkers(n);for(let e of n.units())UnitMarker.get(e).update()}else e instanceof AirUnit&&(e.based?e.usedMovementPoints=0:e.usedMovementPoints=t.length-1);Countries.china.updateController();for(let e of this.#l.values())e.delete();if(InfoBubble.onshowembarkedunit=null,t){for(let e of this.#d())e.die(),UnitMarker.get(e).update();for(let e of this.partnership.airUnits().filter((e=>!e.based)))e.based=!0,e.usedMovementPoints=0,UnitMarker.get(e).update()}}#m(e,t){t.ondragstart=t=>{const n=this.unitCanMove(e);if(null===n){if(this.#h.push(e),t instanceof MouseEvent&&t.ctrlKey){let n=0;for(let i of e.hex().units().filter((t=>t!==e&&t.sameBasicType(e)&&null===this.unitCanMove(t))).take(4))n+=5,this.#h.push(i),this.#l.get(UnitMarker.get(i)).simulateDragStart(t,n)}}else Toastify({text:n}).showToast();return null===n},t.ondragmove=e=>{this.bubbleHoveredOver||null!==this.#o||this.#p(this.#h,e)},t.ondragfinished=()=>{this.#c(this.#h),this.#h=[]},t.onunitbubblecreate=(n,i)=>{if(e instanceof NavalUnit||n instanceof LandUnit||e instanceof AirUnit&&n instanceof AirUnit)return null;const s=e.canEmbarkOnto(n),a=!n.embarkedUnits().values().some((t=>t!==e));let r;return r=a?s?"Embark onto this unit":(n instanceof NavalUnit||n instanceof AirUnit)&&n.damaged()?"Can't embark onto damaged units":"Can't embark onto this type of unit":"Embarking capacity reached",s&&a?(t.onunitbubblemouseover=()=>{this.#o=n,i.popper.style.setProperty("--background-color-light","#99d1ff")},t.onunitbubblemouseout=()=>{this.#o=null,i.popper.style.removeProperty("--background-color-light")}):i.popper.style.setProperty("--background-color-light","#cccccc"),this.#r=i,`<img class="inline" src="images/inside.svg"/> ${r}`}}#d(){return this.partnership.airUnits().filter((e=>!e.based&&(e.hex().controller()?.partnership()!==this.partnership||e.hex().remainingAirbaseCapacity()<[...e.hex().airUnits().filter((e=>e.owner.partnership()===this.partnership&&!e.based))].length)))}#u(){this.#n.replaceChildren();for(let e of this.#d())this.#n.appendChild(UnitMarker.get(e).createCopyImage(!0))}#b(e){const t=e.findIndex(((t,n)=>t===e.at(-1)||e.lastIndexOf(t)!==n));return-1!==t&&(e.length=t+1),e}unitCanMove(e){const t=e.embarkedOn(),n=this.passedHexes.get(e);return e.owner.partnership()!==this.partnership?"You can only move your own units.":!this.#e||e instanceof AirUnit&&!e.based?e instanceof AirUnit&&e.hex().airUnitsGrounded()?"Air units in this weather zone are grounded.":e instanceof LandUnit&&e.hasMoved&&(Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement)?"You can't move land units that have moved during the first movement phase.":t instanceof AirUnit&&!t.based?"You can only disembark units from air units if the air unit is based.":null!==t&&e instanceof LandUnit&&!t.hex().isLand()?"You can't disembark land units in all sea hexes.":null!==t&&e instanceof LandUnit&&t.hex().controller()?.partnership()!==this.partnership?"To disembark land units into enemy controlled hexes, you must do an amphibious assault during the amphibious and paradrop phase.":Phase.current!==Phase.AxisInterception&&Phase.current!==Phase.AlliedInterception&&null!==t&&void 0!==n&&n.length>1&&n.at(-1)!==t.hex()?"You can't embark and disembark the same unit during the same phase.":e.hasAttacked&&e instanceof LandUnit&&!(e instanceof Armor)?"Units that have attacked can't move.":void 0!==n&&e.embarkedUnits().values().some((t=>!this.#i.get(e)?.has(t)&&(this.passedHexes.get(t)?.at(-1)??n[0])!==n[0]))?"This unit can't move any more this turn since a unit embarked onto it after it has started moving.":void 0!==n&&this.#i.get(e)?.values().some((t=>t.embarkedOn()!==e&&(this.passedHexes.get(t)?.[0]??this.passedHexes.get(t.embarkedOn())?.[0]??t.hex())!==n[0]))?"This unit can't move any more this turn since a unit disembarked from it after it has started moving.":null:"You can only return unbased air units to their bases during this phase."}async unitsCanBeDroppedHere(e,t){return null===this.#o&&e.some((n=>n.hex()!==t&&!n.canEnterHexWithinStackingLimits(t,this.bubbleHoveredOver,joinIterables(t.units(),e.values()))))?(Toastify({text:"This unit can't enter this hex because of stacking limits."}).showToast(),!1):!e.some((e=>e instanceof AirUnit))||this.bubbleHoveredOver||null!==this.#o||Phase.current!==Phase.AxisSecondMovement&&Phase.current!==Phase.AlliedSecondMovement?e.every((e=>Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement||!(e instanceof AirUnit)||this.bubbleHoveredOver||this.passedHexes.get(e).length-1<=e.movementAllowance/2))||await xdialogConfirm("Move air unit more than half its movement allowance?","If you move your air unit here, it won't be able to make it back to its original airbase at the end of this offensive. If it doesn't make it to any other friendly airbase either, it will be eliminated.<br/><br/>Do you really want to use more than half its movement points in this phase?"):(Toastify({text:"Air units must finish this phase based."}).showToast(),!1)}#p(e,t){if(null===t||1===e.length&&UnitMarker.expandedStack()?.some((t=>e[0].canEmbarkOnto(t))))return;let n=!1;for(let i of e){let e=this.passedHexes.get(i);n||=t!==e?.at(-1),void 0===e&&(e=[i.hex()],this.passedHexes.set(i,e))}if(this.clearPassedHexesColors(e),e.every((e=>e.validateMovement(this.#b([...this.passedHexes.get(e),t]),!1))))for(let n of e)this.passedHexes.get(n).push(t),n instanceof LandUnit&&(n.movingByRail=!1);else if(e.every((e=>e instanceof LandUnit))&&e.every((e=>e instanceof LandUnit))&&e.every((n=>n.canUseRail(e)&&n.validateMovement(this.#b([...this.passedHexes.get(n),t]),!0))))for(let n of e)this.passedHexes.get(n).push(t),n.movingByRail=!0;for(let t of e)this.#b(this.passedHexes.get(t));if(this.colorHexes(e),n&&(this.#a?.destroy(),this.#a=null,this.#r?.destroy(),this.#r=null,this.bubbleHoveredOver=!1,(e.every((e=>e instanceof AirUnit))&&t.airbaseCapacity()>0||e.every((e=>e instanceof NavalUnit))&&t.isPort())&&t.controller()?.partnership()===this.partnership)){const n=e.every((n=>n.canEnterHexWithinStackingLimits(t,!0,joinIterables(e,t.units()).filter((e=>e!==n))))),i=n?e.every((e=>e instanceof AirUnit))?"Base air unit here":"Place naval unit in port":e.every((e=>e instanceof AirUnit))?"Airbase capacity reached":"Port capacity reached",s=e.every((e=>e instanceof AirUnit))?"landing-plane.svg":"port.svg";this.#a=InfoBubble.hexTippy(t,{content:`<img class="inline" src="images/${s}"/> ${i}`}),n?(this.#a.popper.addEventListener("mouseover",(()=>{this.bubbleHoveredOver=!0,this.#a?.popper.style.setProperty("--background-color-light","#99d1ff")})),this.#a.popper.addEventListener("mouseout",(()=>{this.bubbleHoveredOver=!1,this.#a?.popper.style.removeProperty("--background-color-light")}))):this.#a.popper.style.setProperty("--background-color-light","#cccccc")}}async#c(e){const t=this.passedHexes.get(e[0])?.at(-1);if(void 0===t&&null===this.#o)return;e.every((e=>e instanceof AirUnit))&&(Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement)&&t?.controller()?.partnership()===this.partnership&&t?.airbaseCapacity()>0&&(this.bubbleHoveredOver=!0);const n=void 0===t||await this.unitsCanBeDroppedHere(e,this.#o?.hex()??t);if(this.clearPassedHexesColors(e),this.#a?.destroy(),this.#a=null,this.#r?.destroy(),this.#r=null,!n)return this.bubbleHoveredOver=!1,void(this.#o=null);for(let n of e){const e=this.passedHexes.get(n),i=n.embarkedOn();void 0!==t&&n.setHex(t),n instanceof AirUnit?n.based=this.bubbleHoveredOver:n instanceof NavalUnit?n.inPort=this.bubbleHoveredOver:n instanceof LandUnit&&(Phase.current===Phase.AxisFirstMovement||Phase.current===Phase.AlliedFirstMovement)&&(n.hasMoved=void 0!==e&&e.length>1),null!==this.#o&&(n.embarkOnto(this.#o),t!==this.#o.hex()&&void 0!==e&&(e.push(this.#o.hex()),this.#b(e),1===e.length&&this.#i.get(this.#o)?.has(n)&&this.passedHexes.delete(n)),UnitMarker.get(this.#o).update()),null!==i&&UnitMarker.get(i).update();const s=UnitMarker.get(n);if(s.update(),!this.#l.has(s)){const e=s.createMoveUnitListener(!0);this.#m(n,e),this.#l.set(s,e)}}this.#u(),this.bubbleHoveredOver=!1,this.#o=null;for(let t of e)1===this.passedHexes.get(t)?.length&&this.#t.has(t)===this.bubbleHoveredOver&&this.passedHexes.delete(t)}colorHexes(e){const t=Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement;if(t&&e.every((e=>e instanceof AirUnit)))for(let t of this.#s)e.some((e=>t.distanceFromHex(e.hex())>e.movementAllowance-e.usedMovementPoints))||(t.controller()?.partnership()===this.partnership&&e.every((n=>n.canEnterHexWithinStackingLimits(t,!0,joinIterables(t.units(),e))))||e.every((n=>[...t.navalUnits().filter((e=>n.canEmbarkOnto(e)&&0===e.embarkedUnits().size))].length>=e.length)))&&HexMarker.colorHex(t,"purple");for(let t of e.flatMap((e=>this.passedHexes.get(e))))HexMarker.colorHex(t,"yellow");const n=e.filter((e=>e instanceof AirUnit)).sort(((e,t)=>sortNumber(e,t,(e=>e.movementAllowance))))[0];if(void 0!==n&&!t){const e=this.passedHexes.get(n)[Math.floor(n.movementAllowance/2)];void 0!==e&&HexMarker.colorHex(e,"orange")}for(let t of e)HexMarker.colorHex(this.passedHexes.get(t)[0],"green");const i=this.passedHexes.get(e[0]).at(-1),s=i.adjacentHexes().filter((t=>!e.flatMap((e=>this.passedHexes.get(e))).includes(t)&&e.every((e=>e.validateMovement([...this.passedHexes.get(e),t],e instanceof NavalUnit)||e instanceof LandUnit&&e.canUseRail()&&e.validateMovement([...this.passedHexes.get(e),t],!0)))));if(0===s.length)HexMarker.colorHex(i,"red");else for(let e of s)HexMarker.colorHex(e,"blue")}clearPassedHexesColors(e){for(let t of e)for(let e of this.passedHexes.get(t)?.flatMap((e=>[e,...e.adjacentHexes()]))??[])HexMarker.uncolorHex(e);for(let e of this.#s)HexMarker.uncolorHex(e)}}