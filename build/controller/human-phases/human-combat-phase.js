import lodash from"https://cdn.jsdelivr.net/npm/lodash@4.17.21/+esm";import{joinIterables,xdialogConfirm}from"../../utils.js";import{Countries}from"../../model/countries.js";import{AirUnit,Armor,LandUnit,NavalUnit,Submarine,Unit}from"../../model/units.js";import{AirNavalCombat,AtomicBombing,InstallationBombing,LandCombat,StrategicBombing}from"../../model/combat.js";import CombatTables from"../../view/combat/combat-tables.js";import HexMarker from"../../view/markers/hex-marker.js";import LeftPanel from"../../view/left-panel.js";import RunCombat from"../../view/combat/run-combat.js";import UnitMarker from"../../view/markers/unit-marker.js";export default class HumanCombatPhase{#t;#e;#a=document.createElement("div");#n=[];#i=[];#s=null;#o=()=>{};constructor(t,e){this.#t=t,this.#e=e}async run(){LeftPanel.clear(),this.#e?LeftPanel.appendParagraph("During this phase, your armor units may attack enemy land units. Only armor units may attack, and armor units that attacked successfully may ignore control zones when moving during the next movement phase."):LeftPanel.appendParagraph("During this phase, your units may attack enemy units."),LeftPanel.appendParagraph("Click on a friendly unit to attack with it, then click on an enemy unit to attack it."),LeftPanel.appendParagraph("Stacks of enemy land units can be attacked by friendly land units in hexes adjacent to them. Friendly naval and bomber units in the same hex as the enemy land unit can give support to the friendly land units, but can't attack enemy land units alone. Enemy land units must always be attacked by stack."),this.#e||(LeftPanel.appendParagraph("Stacks of enemy naval units can be attacked by friendly naval units in hexes adjacent to them, or by friendly bombers in the same hex. Unlike enemy land units, enemy naval units can (but don't have to) be attacked by bombers alone. Enemy naval units must always be attacked by stack."),LeftPanel.appendParagraph("Enemy air units can be attacked by friendly fighters in the same hex.")),LeftPanel.appendBox("Combat information",[this.#a]),this.#r(),this.#c(),await new Promise((t=>this.#o=t));for(let t of Unit.allAliveUnits())UnitMarker.get(t).deselect(),UnitMarker.get(t).onclick=null}#l(t){if(t.hasAttacked)Toastify({text:"This unit has already attacked this turn."}).showToast();else if(this.#e&&!t.canDoOverrun())t instanceof Armor?Toastify({text:"This unit can't do overrun because of the weather."}).showToast():Toastify({text:"Only armor units may attack during the overrun phase. Other units must wait until the combat phase."}).showToast();else if([t,...this.#n].some((t=>t instanceof AirUnit&&"MXY-7 Ohka"===t.model))&&[t,...this.#n].some((t=>!(t instanceof AirUnit&&t.canDoKamikaze()))))Toastify({text:"MXY-7 Ohka units can only do kamikaze attacks, but you have selected one or more units that can't do kamikaze attacks."}).showToast();else if(t.outOfSupply())Toastify({text:"Units that are out of supply can't attack."}).showToast();else if(t.canAttack())if(t instanceof AirUnit&&this.#n.some((e=>e instanceof AirUnit&&e.hex()!==t.hex())))Toastify({text:"Air units must be in the same hex to be able to attack at the same time."}).showToast();else{this.#n.includes(t)?(lodash.pull(this.#n,t),UnitMarker.get(t).deselect()):(this.#n.push(t),UnitMarker.get(t).select());for(let t of this.#i)UnitMarker.get(t).deselect();this.#i=[],this.#s=null,this.#c()}else Toastify({text:"This type of unit can't attack."}).showToast()}#h(t){const e=t.hex();if(0===this.#n.length){const a=[e,...e.adjacentHexes()];if(this.#n=a.flatMap((t=>[...t.units()])).filter((e=>e.canAttackInHex(t)&&(!this.#e||e.canDoOverrun()))),0===this.#n.length)return void Toastify({text:"You don't have any units that can attack this unit."}).showToast();this.#n[0]instanceof AirUnit&&"MXY-7 Ohka"===this.#n[0].model?this.#n=this.#n.filter((t=>t instanceof AirUnit&&t.canDoKamikaze())):this.#n=this.#n.filter((t=>!(t instanceof AirUnit)||"MXY-7 Ohka"!==t.model));for(let t of this.#n)UnitMarker.get(t).select()}if(t instanceof LandUnit)for(let t of e.landUnits().filter((t=>t.owner.partnership()===this.#t)))this.#n.includes(t)||(this.#n.push(t),UnitMarker.get(t).select());for(let t of this.#i)UnitMarker.get(t).deselect();if(this.#i=[],this.#s=null,t instanceof LandUnit&&!this.#n.some((t=>t instanceof LandUnit)))Toastify({text:"Naval and air units can't attack enemy land units alone, though they may support friendly land units attacking the enemy land units."}).showToast();else if(t instanceof NavalUnit&&t.inPort()&&t.hex().isMajorPort()&&this.#n.some((t=>t instanceof NavalUnit)))Toastify({text:"Naval units can't attack units that are in a major port."}).showToast();else{if(this.#n.every((e=>e.canAttackInHex(t))))if(t instanceof LandUnit)this.#i=[...e.landUnits().filter((t=>t.owner.partnership()!==this.#t))],this.#s=new LandCombat(this.#n,this.#i);else if(t instanceof NavalUnit&&this.#n.every((t=>t instanceof AirUnit||t instanceof NavalUnit))){this.#i=[...e.navalUnits().filter((e=>t instanceof Submarine?e instanceof Submarine:!(e instanceof Submarine)))];const a=new AirNavalCombat(this.#n,this.#i);a.kamikaze=this.#n.some((t=>t instanceof AirUnit&&"MXY-7 Ohka"===t.model)),this.#s=a}else t instanceof AirUnit&&this.#n.every((t=>t instanceof AirUnit))&&(this.#i=[t],this.#s=new AirNavalCombat(this.#n,this.#i));if(null===this.#s)Toastify({text:"You have selected one or more units that can't attack this unit."}).showToast();else{for(let t of this.#i)UnitMarker.get(t).select();HexMarker.colorHex(e,"purple")}this.#c()}}#r(){for(let t of this.#t.units())UnitMarker.get(t).onclick=()=>this.#l(t);for(let t of this.#t.opponent().units())UnitMarker.get(t).onclick=()=>this.#h(t)}#c(){if(0===this.#i.length&&this.#n.length>0&&this.#n.every((t=>t instanceof AirUnit))&&this.#n.every((t=>t.bomberStrength>0))){const t=document.createElement("p");t.textContent="Choose a type of bombing in the list below. To attack enemy units instead, select those units.",this.#a.replaceChildren(t),this.#m(this.#n)}else if(null===this.#s)this.#a.textContent="Select attackers or defenders to display probabilities for combat results.";else{this.#a.replaceChildren(CombatTables.createCombatTable(this.#s));const t=this.#s;if(t instanceof AirNavalCombat&&t.attackers.every((t=>t instanceof AirUnit))&&t.defenders.every((t=>t instanceof NavalUnit))){const e=document.createElement("label"),a=document.createElement("input");a.type="checkbox",a.checked=t.kamikaze,a.disabled=t.attackers.some((t=>!t.canDoKamikaze()||"MXY-7 Ohka"===t.model)),a.onchange=()=>{t.kamikaze=a.checked,this.#c()},e.appendChild(a);const n=document.createElement("span");n.textContent=" Kamikaze attack",e.appendChild(n),t.attackers.some((t=>!t.canDoKamikaze()))?(a.disabled=!0,n.style.color="gray",e.appendChild(document.createTextNode(" Only Japanese air units can do kamikaze attacks, and they can do so only if the United States controls at least one city hex in Japan or its colonies."))):t.attackers.some((t=>"MXY-7 Ohka"===t.model))&&(a.disabled=!0,n.style.color="gray",e.appendChild(document.createTextNode(" MXY-7 Ohka can only do kamikaze attacks."))),this.#a.appendChild(e)}}0===this.#n.length&&0===this.#i.length?(LeftPanel.waitForNextButtonPressed("To movement phase",(()=>!this.#t.units().some((t=>joinIterables(t.hex().adjacentHexes(),[t.hex()]).flatMap((t=>t.units())).some((e=>e.owner.partnership()!==this.#t&&t.canAttackInHex(e)))&&(!this.#e||t.canDoOverrun())))||xdialogConfirm("End combat phase?","Do you really want to end the combat phase?"))).then((()=>this.#o())),LeftPanel.hideCancelButton()):(LeftPanel.setNextButtonClick("To combat results",(()=>this.#d())),LeftPanel.showCancelButton("Cancel attacks",(()=>this.#f())))}#m(t){const e=new Map([["Installation bombing",t.map((t=>t.canDoInstallationBombing(t.hex()))).find((t=>null!==t))??new InstallationBombing(t)],["Strategic bombing",t.map((t=>t.canDoStrategicBombing(t.hex()))).find((t=>null!==t))??new StrategicBombing(t)],["Atomic bombing",t.map((t=>t.canDoAtomicBombing(t.hex()))).find((t=>null!==t))??new AtomicBombing(t)]]),a=document.createElement("form"),n=document.createElement("div");for(let[t,i]of e){const e=document.createElement("label");e.style.display="block";const s=document.createElement("input");s.type="radio",s.name="HumanCombatPhase.bombing",e.appendChild(s);const o=document.createElement("span");o.textContent=t,e.appendChild(o),"string"==typeof i?(s.disabled=!0,o.style.color="gray",e.appendChild(document.createTextNode(" "+i))):e.onclick=()=>{this.#s=i,n.replaceChildren(CombatTables.createCombatTable(i)),LeftPanel.setNextButtonClick("To combat results",(()=>this.#d()))},a.appendChild(e)}this.#a.appendChild(a),this.#a.appendChild(n)}async#d(){if(null===this.#s)Toastify({text:"You must select which units should participate in the combat."}).showToast();else{for(let t of Unit.allAliveUnits())UnitMarker.get(t).onclick=null;const t="Attack is ongoing...";LeftPanel.addNextButtonLock(t),LeftPanel.hideCancelButton();const e=await RunCombat.runCombat(this.#s),a=document.createElement("p");e.appendChild(a),this.#a.replaceChildren(e),LeftPanel.releaseNextButtonLock(t);for(let t of[...this.#n,...this.#i].filter((t=>t.isAlive())))UnitMarker.get(t).deselect();const n=new Promise((t=>{for(let e of Unit.allAliveUnits()){const a=UnitMarker.get(e);a.onclick=async()=>{for(let t of Unit.allAliveUnits())UnitMarker.get(t).deselect();t(),await n,a.onclick?.()}}})),i=[...this.#s instanceof LandCombat?this.#s.combatHex.landUnits().filter((t=>t.owner.partnership()!==this.#t)):this.#s.combatHex.navalUnits()];if(this.#n.every((t=>t instanceof AirUnit)))a.textContent="Click Next to continue.",await Promise.race([n,LeftPanel.waitForNextButtonPressed("Continue combat phase")]);else if(i.length>0)a.textContent="You can't advance after combat since there are still defenders in the combat hex. Click Next to continue.",await Promise.race([n,LeftPanel.waitForNextButtonPressed("Continue combat phase")]);else if(this.#s instanceof LandCombat&&this.#s.isAmphibious)a.textContent="In an amphibious or paradrop combat, the assaulting units automatically advance after combat.",await Promise.race([n,LeftPanel.waitForNextButtonPressed("Continue combat phase")]);else{a.textContent="Click on the units you want to advance after combat with, then click Next. If you don't want to advance after combat, click Next.";const t=document.createElement("div");e.appendChild(t),await Promise.race([n,this.#u(this.#s.combatHex,t)])}for(let t of[this.#s.combatHex,...this.#i.map((t=>t.hex()))])null!==t&&HexMarker.uncolorHex(t);this.#n=[],this.#i=[],this.#s=null,this.#r(),this.#c(),Countries.china.updateController()}}async#u(t,e){const a=this.#n.filter((e=>e.isAlive()&&e.hex()!==t));let n=new Set;for(let t of a){const a=UnitMarker.get(t),i=a.createCopyImage(!0);e.appendChild(i),a.onclick=i.onclick=()=>{n.has(t)?(n.delete(t),a.deselect(),i.classList.remove("selected"),0===n.size&&LeftPanel.setNextButtonText("Don't advance after combat")):(n.add(t),a.select(),i.classList.add("selected"),LeftPanel.setNextButtonText("Advance after combat"))}}await LeftPanel.waitForNextButtonPressed("Don't advance after combat",(()=>{for(let e of n){if(!e.canEnterHexWithinStackingLimits(t,n.values().filter((t=>t!==e))))return Toastify({text:"Not all these units can advance after combat due to stacking limits. Deselect one or more units by clicking on them."}).showToast(),!1;if(e instanceof Armor&&(t.isDesert()||t.isIcecap()))return Toastify({text:"Armor units can't enter desert or icecap hexes."}).showToast(),!1}return!0}));for(let e of n)e.setHex(t),UnitMarker.get(e).update(),UnitMarker.get(e).deselect(),e instanceof LandUnit&&t.setController(e.owner,!1);for(let e of t.units())UnitMarker.get(e).update();HexMarker.updateMarkers(t)}#f(){for(let t of[...this.#n,...this.#i])UnitMarker.get(t).deselect();const t=this.#i[0]?.hex()??null;null!==t&&HexMarker.uncolorHex(t),this.#n=[],this.#i=[],this.#s=null,this.#c()}}