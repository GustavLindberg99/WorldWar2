import lodash from"https://cdn.jsdelivr.net/npm/lodash@4.17.21/+esm";import HumanMovementPhase from"./human-movement-phase.js";import{AirUnit,LandUnit,NavalUnit,Submarine}from"../../model/units.js";import HexMarker from"../../view/markers/hex-marker.js";import UnitMarker from"../../view/markers/unit-marker.js";import LeftPanel from"../../view/left-panel.js";export default class HumanInterceptionPhase extends HumanMovementPhase{#e;#t;#n=null;constructor(e,t,n){super(e),this.#t=t,this.#e=n}async run(e){if(this.#t.keys().every((e=>e.owner.partnership()===this.partnership||e instanceof LandUnit)))return LeftPanel.clear(),LeftPanel.appendParagraph("There are no units to intercept. Click Next to continue."),void await LeftPanel.waitForNextButtonPressed("To amphibious and paradrop phase");for(let e of this.partnership.opponent().units())UnitMarker.get(e).onclick=()=>this.#i(e);this.#s(),await super.run(e);for(let e of this.#t.get(this.#n)??[])HexMarker.uncolorHex(e)}unitCanMove(e){return e instanceof AirUnit?this.#t.has(e)?(Toastify({text:"This unit is already performing another mission."}).showToast(),!1):null===this.#n&&e.based?(Toastify({text:"You must select an enemy unit to intercept."}).showToast(),!1):e.outOfSupply()?(Toastify({text:"Units that are out of supply can't attack."}).showToast(),!1):e.canAttack(this.#n)?super.unitCanMove(e):(this.#n instanceof AirUnit?Toastify({text:"Only fighters can intercept air units."}).showToast():Toastify({text:"Only bombers can intercept naval units."}).showToast(),!1):(Toastify({text:"Only air units can intercept other units."}).showToast(),!1)}async unitsCanBeDroppedHere(e,t){const n=e.every((e=>e instanceof AirUnit))&&null!==this.#n&&!this.bubbleHoveredOver?e.map((e=>[e,this.#n])):null;if(null===n&&!this.bubbleHoveredOver)return Toastify({text:"This unit must either intercept an enemy unit or move back to its base."}).showToast(),!1;const i=null===this.#n?void 0:this.#r(this.#n);if(void 0===i||i.includes(t)){if(await super.unitsCanBeDroppedHere(e,t)){const s=lodash.remove(this.#e,(t=>e.includes(t[0])))[0]?.[1];if(void 0!==s){const e=this.#e.findLast((e=>e[1]===s))?.[0],t=(this.passedHexes.get(e)??this.#t.get(e)??this.#t.get(s)).at(-1);s.setHex(t),UnitMarker.get(s).update()}for(let e of i??[])HexMarker.uncolorHex(e);return null!==n&&null!==this.#n&&(this.#e.push(...n),this.#n.setHex(t),UnitMarker.get(this.#n).update(),UnitMarker.get(this.#n).deselect(),this.#n=null),this.#s(),!0}return!1}return Toastify({text:"To intercept the selected enemy unit, move your unit onto a hex that it passed."}).showToast(),!1}colorHexes(e){super.colorHexes(e);const t=this.passedHexes.get(e[0]).at(-1);this.#r(this.#n)?.includes(t)&&HexMarker.colorHex(t,"purple")}clearPassedHexesColors(e){super.clearPassedHexesColors(e);for(let e of this.#r(this.#n)??[])HexMarker.colorHex(e,"#ffff55")}#i(e){const t=this.#r(e);if(e instanceof AirUnit||e instanceof NavalUnit)if(e instanceof Submarine)Toastify({text:"You can't intercept submarines."}).showToast();else if(void 0===t)Toastify({text:"You can't intercept units that haven't moved."}).showToast();else if(e===this.#n){for(let e of t)HexMarker.uncolorHex(e);UnitMarker.get(e).deselect(),this.#n=null}else{for(let e of this.#t.get(this.#n)??[])HexMarker.uncolorHex(e);for(let e of t)HexMarker.colorHex(e,"#ffff55");null!==this.#n&&UnitMarker.get(this.#n).deselect(),UnitMarker.get(e).select(),this.#n=e}else Toastify({text:"You can't intercept land units."}).showToast()}#r(e){const t=this.#t.get(e);return t?.slice(0,t.indexOf(e.hex())+1)}#s(){LeftPanel.clear(),LeftPanel.appendParagraph("The following units have been intercepted so far:");for(let[e,t]of this.#e){const n=document.createElement("p");n.appendChild(UnitMarker.get(e).createCopyImage(!0)),n.appendChild(document.createTextNode("âž” ")),n.appendChild(UnitMarker.get(t).createCopyImage(!0)),LeftPanel.appendElement(n)}LeftPanel.appendParagraph("The following enemy units haven't been intercepted yet:");for(let e of this.#t.keys().filter((e=>e.owner.partnership()!==this.partnership&&!(e instanceof LandUnit)&&!(e instanceof Submarine)&&this.#t.get(e).some((e=>!e.airUnitsGrounded())))))this.#e.some((t=>t[1]===e))||LeftPanel.appendElement(UnitMarker.get(e).createCopyImage(!0));LeftPanel.appendParagraph("To intercept an enemy air or naval unit, click on the enemy unit to intercept, then drag a friendly air unit to a hex that it's passed.")}}