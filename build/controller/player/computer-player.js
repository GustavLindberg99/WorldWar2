import lodash from"https://cdn.jsdelivr.net/npm/lodash@4.17.21/+esm";import{addToMapOfSets,joinIterables,sortNumber}from"../../utils.js";import Player from"./player.js";import{Hex,SupplyLines}from"../../model/mapsheet.js";import{Partnership}from"../../model/partnership.js";import{Countries}from"../../model/countries.js";import{AirUnit,Armor,Convoy,Infantry,LandUnit,NavalUnit,Paratrooper,Submarine,Unit}from"../../model/units.js";import{date,Month}from"../../model/date.js";import{Phase}from"../../model/phase.js";import{UnitCombat}from"../../model/combat.js";import HexMarker from"../../view/markers/hex-marker.js";import LeftPanel from"../../view/left-panel.js";import RunCombat from"../../view/combat/run-combat.js";import UnitMarker from"../../view/markers/unit-marker.js";import AirNavalAutoplacement from"../computer-player-algorithms/autoplace/air-naval-unit-autoplacement.js";import ComputerCombatPhase from"../computer-player-algorithms/computer-combat-phase.js";import ComputerMovementPhase from"../computer-player-algorithms/computer-movement-phase.js";import FrontLine from"../computer-player-algorithms/front-line.js";import LandAutoplacement from"../computer-player-algorithms/autoplace/land-unit-autoplacement.js";export default class ComputerPlayer extends Player{#e=!0;async incomePhase(){if(super.incomePhase(),this.partnership===Partnership.Allies&&Countries.sovietUnion.cities.find((e=>"Murmansk"===e.city)).controller()===Countries.sovietUnion){const e=4e3-Countries.sovietUnion.money+1e3;this.#t(Countries.unitedStates,Countries.sovietUnion,e*Math.random()),this.#t(Countries.unitedKingdom,Countries.sovietUnion,e*Math.random()),this.#t(Countries.canada,Countries.sovietUnion,e*Math.random())}this.partnership===Partnership.Allies&&this.#t(Countries.canada,Countries.unitedKingdom)}#t(e,t,n=1/0){if(e.partnership()===this.partnership&&t.partnership()===this.partnership&&!t.conquered()&&t.cities.some((e=>e.isPort()&&e.controller().partnership()===this.partnership))){const r=10*Math.floor(Math.min(e.maxMoneyExchange(),n)/10);let a=0;for(let n of this.partnership.convoys(e)){n.destination=t;const e=Math.min(Convoy.maxMoney,r-a);n.money=e,a+=e}e.money-=a}}async deploymentPhase(e){const t="Your opponent is placing their units...";LeftPanel.addNextButtonLock(t);let n=0;const r=document.createElement("p");r.textContent="Your opponent is placing their units...",LeftPanel.appendElement(r),LeftPanel.appendProgressBar((()=>n)),FrontLine.update((e=>n=e/4));let a=this.partnership.currentDelayedUnits().filter((e=>e instanceof LandUnit)),i=lodash.shuffle(this.partnership.currentDelayedUnits().filter((e=>e instanceof NavalUnit))),o=lodash.shuffle(this.partnership.currentDelayedUnits().filter((e=>e instanceof AirUnit))).sort(((e,t)=>e.movementAllowance-t.movementAllowance));const s=await AirNavalAutoplacement.getNavalUnitAutoplacement(this.partnership,i,(e=>n=1/4+e/4)),p=await LandAutoplacement.getLandUnitAutoplacement(this.partnership,a,(e=>n=.5+e/4)),l=await AirNavalAutoplacement.getAirUnitAutoplacement(this.partnership,o,(e=>n=3/4+e/4));n=1,LeftPanel.releaseNextButtonLock(t),r.textContent="Your opponent is done placing their units.",await e,LandAutoplacement.placeLandUnits(p),AirNavalAutoplacement.placeAirNavalUnits(l),AirNavalAutoplacement.placeAirNavalUnits(s);for(let e of a)p.has(e)||e.owner.availableUnits.add(e);for(let e of o)l.has(e)||e.owner.availableUnits.add(e);for(let e of i)s.has(e)||e.owner.availableUnits.add(e);for(let e of this.partnership.landUnits()){if(null!==e.embarkedOn()||!e.isAlive()||e.maxStrength()<=1||e.outOfSupply())continue;const t=e.hex().landUnits().find((t=>t!==e&&t.sameType(e)));for(;t?.isAlive()&&e.strength<e.maxStrength();)e.strength++,1===t.strength?t.delete():t.strength--,UnitMarker.get(e).update(),UnitMarker.get(t).update()}for(let e of Hex.allHexes){const t=e.controller();(e.resourceHexDestroyed||e.installationsDestroyed)&&t?.partnership()===this.partnership&&t.money>=200+1e4*Math.random()&&(t.money-=200,e.repairInstallations())}for(let e of this.partnership.countries())e.delayedUnits.delete(date.current)}async unitBuildPhase(){for(let e of joinIterables(this.partnership.airUnits(),this.partnership.navalUnits().filter((e=>e.inPort))))e.damaged()&&e.owner.money>=200&&(e.owner.money-=200,e.repair(),UnitMarker.get(e).update());const e=e=>e.owner.cities.some((e=>!e.isColony&&e.controller().partnership()!==e.country.partnership())),t=this.partnership.countries().some((e=>!e.conquered()&&this.partnership.countries().some((t=>!t.conquered()&&e.canSendMoneyWithConvoys().includes(t))))),n=lodash.shuffle([...this.partnership.availableUnits()]).sort(((t,n)=>sortNumber(n,t,(t=>t instanceof Infantry&&e(t)))||sortNumber(n,t,(t=>t instanceof Armor&&e(t))))).filter((e=>t||!(e instanceof Convoy)));for(let e of n)e.owner.money<e.price()||(e.owner.availableUnits.delete(e),e.owner.money-=e.price(),addToMapOfSets(e.owner.delayedUnits,date.current+e.delay(),e))}async overrunPhase(){const e=new ComputerCombatPhase(this.partnership,!0);await e.run();for(let e of this.partnership.landUnits().filter((e=>e.hasAttacked)))e.hasAttacked=!1,UnitMarker.get(e).update()}async firstMovementPhase(){const e=new ComputerMovementPhase(this.partnership);return await e.run("To interception phase"),e.passedHexes}async interceptionPhase(e,t){const n=null===t;t??=[];const r=t.length;for(let[n,r]of e.entries().filter((e=>e[0].owner.partnership()!==this.partnership))){if(!(n instanceof AirUnit)&&!(n instanceof NavalUnit)||n instanceof Submarine||r.length<=1||r.every((e=>e.airUnitsGrounded())))continue;const a=r.slice(0,r.indexOf(n.hex())+1),i=this.partnership.airUnits().find((t=>t.canAttack(n)&&!e.has(t)&&a.some((e=>e.distanceFromHex(t.hex())<=t.movementAllowance/2))&&!t.hex().airUnitsGrounded()));if(void 0===i)continue;const o=SupplyLines.simplifiedPathBetweenHexes(i.hex(),(e=>a.includes(e)),(e=>!e.airUnitsGrounded()),!0,!0);if(null===o||o.length-1>i.movementAllowance/2||!i.validateMovement(o,!1))continue;e.set(i,o),t.push([i,n]);const s=o.at(-1);i.setHex(s),n.setHex(s),UnitMarker.get(i).update(),UnitMarker.get(n).update()}t.length>0?(await this.opponent().interceptionPhase(e,t),await RunCombat.runInterceptions(t,r,e)):(LeftPanel.clear(),LeftPanel.appendParagraph("Your opponent didn't intercept any of your units. Click Next to continue."),await LeftPanel.waitForNextButtonPressed(n?"To amphibious and paradrop phase":"To interception combat"))}async amphibiousParadropPhase(){const e=new Set(this.partnership.landUnits().filter((e=>null!==e.embarkedOn()&&e.hex().controller()?.partnership()===this.opponent().partnership)).map((e=>e.hex())));for(let t of e){HexMarker.colorHex(t,"purple"),HexMarker.scrollToHex(t);const e=[...t.navalUnits().filter((e=>e.owner.partnership()===this.partnership)).flatMap((e=>e.embarkedUnits())).filter((e=>e instanceof LandUnit))].sort(((e,t)=>t.strength-e.strength)),n=[...t.airUnits().filter((e=>e.owner.partnership()===this.partnership)).flatMap((e=>e.embarkedUnits())).filter((e=>e instanceof Paratrooper))].sort(((e,t)=>t.strength-e.strength));let r=new Set,a=new Set;n.length>0&&a.add(n[0]);for(let n of e)n.canEnterHexWithinStackingLimits(t,!1,joinIterables(r,a))&&r.add(n);for(let e of n.slice(1))e.canEnterHexWithinStackingLimits(t,!1,joinIterables(r,a))&&r.add(e);if(joinIterables(r,a).reduce(((e,t)=>e+t.strength),0)<t.landUnits().filter((e=>e.owner.partnership()!==this.partnership)).reduce(((e,t)=>e+t.strength),0))continue;const i=UnitCombat.amphibiousParadropSuccessProbability(r,a);if(LeftPanel.clear(),r.size>0){LeftPanel.appendParagraph("Units doing amphibious assault:");const e=document.createElement("div");for(let t of r)e.appendChild(UnitMarker.get(t).createCopyImage(!0));LeftPanel.appendElement(e)}if(a.size>0){LeftPanel.appendParagraph("Units doing paradrop:");const e=document.createElement("div");for(let t of a)e.appendChild(UnitMarker.get(t).createCopyImage(!0));LeftPanel.appendElement(e)}LeftPanel.appendParagraph(`Probability for succes: ${Math.round(100*i)}%`),await LeftPanel.waitForNextButtonPressed("To results"),LeftPanel.clear();UnitCombat.runAmphibiousParadrop(r,a)?LeftPanel.appendParagraph("Assault succeeded."):LeftPanel.appendParagraph("Assault failed.");for(let e of t.units())UnitMarker.get(e).update();await LeftPanel.waitForNextButtonPressed("Continue amphibious/paradrop phase"),HexMarker.uncolorHex(t)}LeftPanel.clear(),LeftPanel.appendParagraph("Your opponent is done doing amphibious assaults and paradrops. Click Next to continue."),await LeftPanel.waitForNextButtonPressed("To combat")}async combatPhase(){const e=new ComputerCombatPhase(this.partnership,!1);await e.run()}async secondMovementPhase(){const e=new ComputerMovementPhase(this.partnership);let t;t=this.partnership===Partnership.Allies&&Phase.current===Phase.AlliedSecondMovement||this.partnership===Partnership.Axis&&Phase.current===Phase.AxisSecondMovement?"To you landing air units":this.partnership===Partnership.Axis?"To supply phase":"To opponent's main phase",await e.run(t)}async warDeclarationPhase(){const e=[],t=Countries.all().filter((e=>e.canBeActivated(this.partnership)));Math.random()>.2&&lodash.pull(t,Countries.mongolia),this.partnership===Countries.sovietUnion.partnership()&&Countries.poland.partnership()!==Partnership.Neutral&&Countries.latvia.cities[0].controller()===Countries.latvia?(e.push(Countries.estonia),e.push(Countries.latvia),e.push(Countries.lithuania)):this.partnership===Partnership.Axis&&(Countries.germany.partnership()===Partnership.Axis&&[Countries.belgium,Countries.poland,Countries.denmark,Countries.norway,Countries.switzerland,Countries.yugoslavia,Countries.greece].every((e=>e.partnership()!==Partnership.Allies||e.conquered()))&&(Countries.denmark.conquered()&&Countries.norway.partnership()===Partnership.Neutral&&e.push(Countries.norway),date.current===date(1943,Month.January)&&(this.#e=!1),Countries.norway.conquered()&&Countries.sweden.partnership()===Partnership.Neutral&&!this.#e?(this.#e=!0,Math.random()<.2&&e.push(Countries.sweden)):Countries.poland.partnership()===Partnership.Neutral?Countries.denmark.partnership()===Partnership.Neutral&&Math.random()<.1?e.push(Countries.denmark):Countries.switzerland.partnership()===Partnership.Neutral&&Math.random()<.1?e.push(Countries.switzerland):e.push(Countries.poland):Countries.denmark.partnership()===Partnership.Neutral&&Math.random()<.8?e.push(Countries.denmark):Countries.germany.partnership()===Partnership.Axis&&Countries.france.partnership()===Partnership.Allies?(e.push(Countries.netherlands),e.push(Countries.belgium),e.push(Countries.luxemburg)):date.current>=date(1941,Month.January)&&Math.random()<.2&&Countries.france.conquered()&&e.push(Countries.sovietUnion)),date.current>=date(1940,Month.January)&&Math.random()<.1&&e.push(Countries.greece),date.current>=date(1940,Month.January)&&Math.random()<.05&&e.push(Countries.yugoslavia),date.current>=date(1941,Month.January)&&Math.random()<.2&&e.push(Countries.unitedStates),date.current>=date(1940,Month.January)&&Math.random()<.1&&(e.push(Countries.unitedKingdom),e.push(Countries.france)));let n=[];Countries.france.canAttemptVichy(this.partnership)&&(n.push(...Unit.allAliveUnits().filter((e=>e.owner===Countries.france||e.hex().country===Countries.france))),Countries.france.attemptVichy()),Countries.finland.canSurrender(this.partnership)&&(n.push(...Unit.allAliveUnits().filter((e=>e.owner===Countries.finland||e.hex().country===Countries.finland))),Countries.finland.surrender());for(let e of n)UnitMarker.get(e).update();for(let t of e)t.joinPartnership(this.opponent().partnership);for(let e of t)e.joinPartnership(this.partnership)}}