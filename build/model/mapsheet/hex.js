import{Countries}from"../countries.js";import{currentMonth,date,Month}from"../date.js";import{SupplyLines,TerrainType,WeatherCondition,WeatherZone}from"../mapsheet.js";import{Partnership}from"../partnership.js";import{AirUnit,NavalUnit,SupplyUnit,Unit}from"../units.js";import{hexHeight,hexWidth,mapHeight,mapWidth,svgHeight,svgWidth}from"./create-hexes.js";import UnitContainer from"../unit-container.js";class Hex extends UnitContainer{x;y;terrain;weatherZone;canUseRail;country;isResourceHex;isColony;isIndia;secondaryController;#t;#e;city;cityAlignment;cityOffsetX;cityOffsetY;isCapital;isEnclaveCity;#r;resourceHexDestroyed=!1;installationsDestroyed=!1;destroyedByAtomicBomb=!1;#n;#i=0;#o=0;static groundedAirUnits=new Set;static mapWidth=mapWidth;static mapHeight=mapHeight;static hexWidth=hexWidth;static hexHeight=hexHeight;static svgWidth=svgWidth;static svgHeight=svgHeight;static allHexes=[];static allCityHexes=[];static allResourceHexes=[];static#s=Array.from(new Array(mapWidth),(()=>new Array(mapHeight)));constructor(t,e,r,n,i,o,s,a,h,d,l,c,u=null,y="r",p=0,f=0,C=!1,x=!1,m=!1){super(),this.x=t,this.y=e,this.terrain=r,this.weatherZone=n,this.canUseRail=i,this.country=o,this.#n=o,this.isResourceHex=s,this.isColony=a,this.isIndia=h,this.secondaryController=d,this.#t=l,this.#e=c,this.city=u,this.cityAlignment=y,this.cityOffsetX=p,this.cityOffsetY=f,this.isCapital=x,this.isEnclaveCity=m,this.#r=C,Hex.allHexes.push(this),o?.hexes.push(this),null!==u&&(Hex.allCityHexes.push(this),o?.cities.push(this)),s&&Hex.allResourceHexes.push(this),Hex.#s[t][e]=this}units(){return Unit.unitsInHex(this).values()}centerX(){return(this.x+2/3)*hexWidth}centerY(){return(this.y+(this.x%2?1:.5))*hexHeight}controller(){return this.#n}setController(t,e=!0){this.#a(t,e);const r=t.partnership();if(!e&&r!==Partnership.Neutral){let e=[];const n=r.opponent();for(let t of this.adjacentLandHexes())if(t.controller().partnership()===n){const r=e.find((e=>e.some((e=>t.adjacentLandHexes().includes(e)))));void 0===r?e.push([t]):r.push(t)}const i=e.at(-1);if(i!==e[0]&&i?.at(-1)?.adjacentLandHexes().includes(e[0]?.[0])&&(e[0].push(...i),e.pop()),e.length>1||this.#h(n))for(let r of e){const e=r.find((t=>t.country!==Countries.china));if(void 0!==e){null===SupplyLines.pathBetweenHexes(e,(t=>t.#h(n)&&t.controller()?.partnership()===n),(t=>t.controller()?.partnership()===n))&&e.#d(t)}}}}#a(t,e=!0){const r=this.controller();if(null===r)throw new TypeError("Cannot set the controller of an all-sea hex");const n=r.partnership()!==t.partnership();if((n||e)&&(e||this.country.conquered()||t.partnership()!==this.country.partnership()?this.#n=t:this.#n=this.country,n)){this.destroyFortification();for(let t of this.airUnits())t.based=!1}SupplyLines.clearCache()}#d(t){this.#a(t,!1);for(let e of this.adjacentLandHexes())e.country!==Countries.china&&e.controller().partnership()===t.partnership().opponent()&&e.#d(t)}#h(t){return null!==this.city||this.isResourceHex||this.fortified()||this.airbaseCapacity()>0||this.landUnits().some((e=>e.owner.partnership()===t))}distanceFromHex(t){let e=Math.abs(t.x-this.x),r=t.y-this.y-e%2*(this.x%2);if(r<=-e/2)r=Math.abs(r)-e%2;else if(r<e/2){const t=Math.floor(e/2)-r;r=Math.floor(e/2)+Math.floor((t+e%2)/2),e-=t}return e+r-Math.floor(e/2)}distanceFromHexGroup(t){return Math.min(...t.map((t=>t.distanceFromHex(this))))}closestHex(t){return t.toSorted(((t,e)=>this.distanceFromHex(t)-this.distanceFromHex(e)))[0]}isInLandControlZone(t){if(this.fortified()&&t!==this.controller()?.partnership())return!1;if(this.landUnits().some((e=>e.owner.partnership()===t&&!(e instanceof SupplyUnit))))return!0;for(let e of this.adjacentLandHexes())if(e.controller()?.partnership()===t&&e.landUnits().some((e=>e.owner.partnership()===t&&e.owner!==this.#l()&&!(e instanceof SupplyUnit))))return!0;return!1}isInNavalControlZone(t,e){for(let r of[this,...this.adjacentSeaHexes()])if(r.navalUnits().some((r=>r.owner.partnership()===t&&(e?r.submarineAttack>0:r.attack>0))))return!0;return!1}#l(){if(Countries.mongolia.partnership()===Partnership.Neutral&&Countries.japan.partnership()!==Countries.sovietUnion.partnership()){if(this.country===Countries.japan)return Countries.sovietUnion;if(this.country===Countries.sovietUnion)return Countries.japan}return null}unitCanBePlacedHere(t){return t.owner.partnership()===this.controller()?.partnership()&&(t.owner===this.country||date.current===t.owner.enteredWar&&t.owner===this.controller()&&(t.owner===Countries.japan||t.owner===Countries.sovietUnion)||t instanceof NavalUnit&&t.owner===Countries.poland&&this.country===Countries.unitedKingdom&&!this.isColony||t instanceof AirUnit&&t.owner===Countries.unitedStates&&this.isPort()&&(this.controller()===Countries.unitedKingdom||this.controller()===Countries.unitedStates)&&!this.isInNavalControlZone(Partnership.Axis,!1))&&(t.owner!==Countries.poland||this.controller()!==Countries.sovietUnion)}isPort(){return null!==this.city&&!this.installationsDestroyed&&this.isCoastal()&&!this.isIcecap()&&!["Chicago","Cleveland","Toronto","Astrakhan","Baku","Krasnovodsk","Irkutsk","Kampala"].includes(this.city)}isMajorPort(){return this.isPort()&&this.#r}isBlackSea(){return this.x>=171&&this.x<=186&&this.y>=182&&this.y<=191}fortified(){return this.#i>=3}fortUnderConstruction(){return this.#i>0&&!this.fortified()}monthsUntilFortFinished(){return 3-this.#i}fortRecentlyBuilt(){return 1===this.#i}hasAirfield(){return this.#o>=3}airbaseCapacity(){if(this.destroyedByAtomicBomb)return 0;let t=0;return null===this.city||this.installationsDestroyed||(t+=2),this.isResourceHex&&!this.installationsDestroyed&&t++,this.hasAirfield()&&(t+=2),t}remainingAirbaseCapacity(){return this.airbaseCapacity()-[...this.basedAirUnits()].length}airfieldUnderConstruction(){return this.#o>0&&this.#o<3}monthsUntilAirfieldFinished(){return 3-this.#o}airfieldRecentlyBuilt(){return 1===this.#o}destroyInstallations(){this.destroyFortification(),this.destroyAirfield(),this.installationsDestroyed=!0;for(let t of this.basedAirUnits())t.based=!1}destroyFortification(){this.#i=0}destroyAirfield(){this.#o=0}repairInstallations(){this.installationsDestroyed=!1,this.resourceHexDestroyed=!1}startBuildingFortification(){this.#i=1}startBuildingAirfield(){this.#o=1}continueBuilding(){this.fortUnderConstruction()&&this.#i++,this.airfieldUnderConstruction()&&this.#o++}weatherCondition(){return this.weatherZone!==WeatherZone.Polar||currentMonth()!==Month.December&&currentMonth()!==Month.January&&currentMonth()!==Month.February?this.weatherZone===WeatherZone.NorthTemperate&&(currentMonth()===Month.December||currentMonth()===Month.January||currentMonth()===Month.February)||this.weatherZone===WeatherZone.Polar&&currentMonth()>=Month.September&&currentMonth()<=Month.November||this.weatherZone===WeatherZone.SouthTemperate&&currentMonth()>=Month.June&&currentMonth()<=Month.August?WeatherCondition.MildWinter:(this.weatherZone===WeatherZone.NorthTemperate||this.weatherZone===WeatherZone.Polar)&&currentMonth()>=Month.March&&currentMonth()<=Month.May||this.weatherZone===WeatherZone.SouthTemperate&&currentMonth()>=Month.September&&currentMonth()<=Month.November?WeatherCondition.Spring:this.weatherZone===WeatherZone.Tropical&&currentMonth()>=Month.June&&currentMonth()<=Month.August?WeatherCondition.Monsoon:WeatherCondition.None:WeatherCondition.SevereWinter}isForest(){return this.terrain===TerrainType.Forest||this.terrain===TerrainType.CoastalForest}isDesert(){return this.terrain===TerrainType.Desert||this.terrain===TerrainType.CoastalDesert}isMountain(){return this.terrain===TerrainType.Mountain||this.terrain===TerrainType.CoastalMountain}isTallMountain(){return this.terrain===TerrainType.TallMountain||this.terrain===TerrainType.CoastalTallMountain}isIcecap(){return this.terrain===TerrainType.LandIce||this.terrain===TerrainType.CoastalIce||this.terrain===TerrainType.SeaIce}isCoastal(){return this.terrain===TerrainType.Coastal||this.terrain===TerrainType.CoastalMountain||this.terrain===TerrainType.CoastalTallMountain||this.terrain===TerrainType.CoastalForest}isLand(){return this.terrain!==TerrainType.Sea&&this.terrain!==TerrainType.SeaIce}isSea(){return this.terrain===TerrainType.Sea||this.isCoastal()}#c(){return this.x%2?[Hex.fromCoordinates(this.x,this.y-1),Hex.fromCoordinates(this.x-1,this.y),Hex.fromCoordinates(this.x-1,this.y+1),Hex.fromCoordinates(this.x,this.y+1),Hex.fromCoordinates(this.x+1,this.y+1),Hex.fromCoordinates(this.x+1,this.y)]:[Hex.fromCoordinates(this.x,this.y-1),Hex.fromCoordinates(this.x-1,this.y-1),Hex.fromCoordinates(this.x-1,this.y),Hex.fromCoordinates(this.x,this.y+1),Hex.fromCoordinates(this.x+1,this.y),Hex.fromCoordinates(this.x+1,this.y-1)]}adjacentHexes(){return this.#c().filter((t=>void 0!==t))}adjacentLandHexes(){let t=[];for(let e=0;e<6;e++){const r=this.#c()[e];void 0!==r&&(this.#t[e]||this.weatherCondition()===WeatherCondition.SevereWinter&&this.isIcecap()&&r.isIcecap()&&this.isLand()&&r.isLand())&&t.push(r)}return t}adjacentSeaHexes(t=null){if(this.isIcecap())return[];const e=[[Hex.fromCoordinates(105,86),Hex.fromCoordinates(106,86)],[Hex.fromCoordinates(162,169),Hex.fromCoordinates(163,169)],[Hex.fromCoordinates(173,200),Hex.fromCoordinates(173,201)]].find((t=>t.includes(this)));let r=[];null!==t&&e?.every((e=>e.controller().partnership()===t))&&r.push(e.find((t=>t!==this)));for(let t=0;t<6;t++){const e=this.#c()[t];void 0!==e&&this.#e[t]&&!e.isIcecap()&&r.push(e)}return r}airUnitsGrounded(){return Hex.groundedAirUnits.has(this.weatherZone)}landMovementPointCost(){let t=1;return this.weatherCondition()!==WeatherCondition.Spring&&this.weatherCondition()!==WeatherCondition.MildWinter&&this.weatherCondition()!==WeatherCondition.Monsoon||t++,this.isTallMountain()&&t++,t}static airUnitsGrounded(t){return Hex.groundedAirUnits.has(t)}static chooseGroundedAirUnits(){Hex.groundedAirUnits=new Set,currentMonth()===Month.December||currentMonth()<=Month.February?(Math.random()<=.6&&Hex.groundedAirUnits.add(WeatherZone.Polar),Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.NorthTemperate)):currentMonth()<=Month.May?(Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.Polar),Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.NorthTemperate)):currentMonth()<=Month.August?(Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.SouthTemperate),Math.random()<=.6&&Hex.groundedAirUnits.add(WeatherZone.Tropical)):(Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.SouthTemperate),Math.random()<=.3&&Hex.groundedAirUnits.add(WeatherZone.Polar)),Hex.groundedAirUnits.has(WeatherZone.NorthTemperate)&&Hex.groundedAirUnits.add(WeatherZone.Industrialized)}static fromCoordinates(t,e){return Hex.#s[t]?.[e]}toJson(){let t={x:this.x,y:this.y,resourceHexDestroyed:this.resourceHexDestroyed||void 0,installationsDestroyed:this.installationsDestroyed||void 0,destroyedByAtomicBomb:this.destroyedByAtomicBomb||void 0,fortConstruction:this.#i||void 0,airfieldConstruction:this.#o||void 0};return this.controller()!==this.country&&(t.controller=this.controller().name()),t}static validateJson(t){return"object"!=typeof t||null===t?(console.warn("Invalid hex."),!1):"x"in t&&"number"==typeof t.x?"y"in t&&"number"==typeof t.y?void 0===Hex.fromCoordinates(t.x,t.y)?(console.warn(`Invalid hex ${t.x}, ${t.y}: coordinates out of range.`),!1):"resourceHexDestroyed"in t&&"boolean"!=typeof t.resourceHexDestroyed?(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid resourceHexDestroyed.`),!1):"installationsDestroyed"in t&&"boolean"!=typeof t.installationsDestroyed?(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid installationsDestroyed.`),!1):"destroyedByAtomicBomb"in t&&"boolean"!=typeof t.destroyedByAtomicBomb?(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid destroyedByAtomicBomb.`),!1):!("fortConstruction"in t)||"number"==typeof t.fortConstruction&&t.fortConstruction>=0&&t.fortConstruction<=3?!("airfieldConstruction"in t)||"number"==typeof t.airfieldConstruction&&t.airfieldConstruction>=0&&t.airfieldConstruction<=3?!("controller"in t)||null!==Countries.fromName(t.controller)||(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid controller.`),!1):(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid airfieldConstruction.`),!1):(console.warn(`Invalid hex ${t.x}, ${t.y}: invalid fortConstruction.`),!1):(console.warn("Invalid hex: invalid y."),!1):(console.warn("Invalid hex: invalid x."),!1)}loadFromJson(t){if(this.resourceHexDestroyed=t.resourceHexDestroyed??!1,this.installationsDestroyed=t.installationsDestroyed??!1,this.destroyedByAtomicBomb=t.destroyedByAtomicBomb??!1,this.#i=t.fortConstruction??0,this.#o=t.airfieldConstruction??0,void 0!==t.controller){const e=Countries.fromName(t.controller);this.setController(e)}}}export default Hex;