import{joinIterables}from"../../utils.js";import{Partnership}from"../partnership.js";import{Marine}from"../units.js";export default class UnitCombat{retreatableHexes(){const[e,...t]=this.defenders,r=this.adjacentHexes(e.hex()).filter((t=>this.#e(t,e.owner.partnership())&&e.canEnterHexWithinStackingLimits(t))).map((t=>new Map([[e,t]])));return this.#t(t,r)}#t(e,t){if(0===e.length)return t;const[r,...s]=e;let n=[];for(let e of t){const t=this.adjacentHexes(r.hex()).filter((t=>this.#e(t,r.owner.partnership())&&r.canEnterHexWithinStackingLimits(t,joinIterables(this.relevantUnitsInHex(t),e.entries().filter((e=>e[1]===t)).map((e=>e[0]))))));for(let s of t){let t=new Map(e);t.set(r,s),n.push(t)}}return this.#t(s,n)}#e(e,t){return!this.relevantUnitsInHex(e).some((e=>e.owner.partnership()!==t))&&e.controller()?.partnership()!==Partnership.Neutral&&(!this.isInControlZone(e,t.opponent())||this.relevantUnitsInHex(e).some((e=>e.owner.partnership()===t)))}static amphibiousParadropSuccessProbability(e,t){let r=.5;return e.size>0&&t.size>0&&(r+=.25),e.values().some((e=>e instanceof Marine))&&(r+=.25),r}static runAmphibiousParadrop(e,t){const r=joinIterables(e,t);if(Math.random()<UnitCombat.amphibiousParadropSuccessProbability(e,t)){for(let e of r){const t=e.hex();e.setHex(t),t.landUnits().some((t=>t.owner.partnership()!==e.owner.partnership()))||(t.setController(e.owner,!1),e.hasAttacked=!0)}return!0}for(let e of r)e.die();return!1}}