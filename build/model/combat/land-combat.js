import UnitCombat from"./unit-combat.js";import{Countries}from"../countries.js";import{LandUnit,SupplyUnit}from"../units.js";export default class LandCombat extends UnitCombat{attackers;defenders;combatHex;isAmphibious;willingToRetreat=!0;constructor(t,e){super(),this.attackers=t,this.defenders=e,this.combatHex=e[0].hex(),this.isAmphibious=this.attackers.some((t=>t instanceof LandUnit&&t.hex()===this.combatHex))}modifiedAttackStrength(){return this.attackers.reduce(((t,e)=>t+e.modifiedLandAttack()),0)}modifiedDefenseStrength(){return this.defenders.reduce(((t,e)=>t+e.modifiedDefense()),0)}unmodifiedAttackStrength(){return this.attackers.filter((t=>t instanceof LandUnit)).reduce(((t,e)=>t+e.strength),0)}unmodifiedDefenseStrength(){return this.defenders.reduce(((t,e)=>t+e.strength),0)}defenderLossProbability(t){return 1-(2/t+1)**-(this.modifiedAttackStrength()/this.modifiedDefenseStrength())}defenderEliminationProbability(){const t=this.willingToRetreat&&this.retreatableHexes().length>0;return this.defenderLossProbability(Math.ceil(this.unmodifiedDefenseStrength()/(t?1:2)))}attackerLossProbability(t){if(t>3||0===this.modifiedDefenseStrength())return 0;const e=1/(1+t);return Math.max(0,Math.min(e,1))}attackerEliminationProbability(){const t=this.modifiedDefenseStrength();if(0===t)return 0;const e=this.modifiedAttackStrength()/t;return Math.max(0,Math.min(1-e,1))}inflictDamages(){const t=this.attackers.filter((t=>t instanceof LandUnit)),e=Math.random(),i=Math.random();let s=0,n=0;if(e<this.attackerEliminationProbability())s=this.unmodifiedAttackStrength();else for(let t=this.unmodifiedAttackStrength();t>0;t--)if(e<this.attackerLossProbability(t)){s=t;break}for(let t=this.unmodifiedDefenseStrength();t>0;t--)if(i<this.defenderLossProbability(t)){n=t;break}const r=this.retreatableHexes(),o=n>0&&this.willingToRetreat?r[Math.floor(Math.random()*r.length)]:void 0;if(void 0===o&&(n*=2),this.#t(s,t),this.#t(n,this.defenders),this.defenders.every((t=>t instanceof SupplyUnit||!t.isAlive())))for(let t of this.defenders)t.isAlive()&&t.die();for(let[t,e]of o??[])t.isAlive()&&(t.setHex(e),e.setController(t.owner,!1));const a=this.attackers.filter((t=>t instanceof LandUnit)).filter((t=>t.isAlive()&&t.hex()===this.combatHex));if(a.length>0)if(this.defenders.some((t=>t.hex()===this.combatHex)))for(let t of this.combatHex.landUnits().filter((t=>t.owner.partnership()===this.attackers[0].owner.partnership())))s+=t.strength,t.die();else this.combatHex.setController(a[0].owner,!1);return Countries.china.updateController(),{attackerLosses:s,defenderLosses:n}}#t(t,e){for(let i=0;i<t;i++){const t=e.filter((t=>t.isAlive()&&t.strength>0));if(0===t.length){for(let t of e)t.isAlive()&&t.die();break}const i=t[Math.floor(Math.random()*t.length)];if(1===i.strength)i.die();else{i.strength--;const t=i.clone();t.strength=1,i.owner.availableUnits.add(t)}}}adjacentHexes(t){return t.adjacentLandHexes()}relevantUnitsInHex(t){return t.landUnits()}isInControlZone(t,e){return t.isInLandControlZone(e)}}