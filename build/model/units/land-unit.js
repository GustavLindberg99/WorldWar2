import Unit from"./unit.js";import{SupplyLines,WeatherCondition}from"../mapsheet.js";import{Countries}from"../countries.js";import{AirUnit,Armor,Paratrooper,SupplyUnit,TransportShip}from"../units.js";import{Phase}from"../phase.js";import{date}from"../date.js";export default class LandUnit extends Unit{movingByRail=!1;hasMoved=!1;#t;constructor(t,n,e){super(n,e),this.strength=this.#t=t}get strength(){return this.#t}set strength(t){if(t%1!=0||t<0||0===t&&this.maxStrength()>0)throw new RangeError(`The strength of a land unit must be a strictly positive integer, got ${t}`);if(t>this.maxStrength())throw new RangeError(`Trying to set unit strength to ${t} strength points, but max strength is ${this.maxStrength()}`);this.#t=t}die(){this.delete();for(let t=0;t<this.strength;t++){const t=this.clone();t.strength=1,this.owner.availableUnits.add(t)}}outOfSupply(){if(!this.isAlive())return!1;const t=this.hex();if(null===t)return!1;const n=this.embarkedOn();if(null!==n)return n.outOfSupply();const e=t.controller();return(null===e||e.partnership()===this.owner.partnership())&&!SupplyLines.canTraceSupplyLine(t,this.owner,!(this instanceof SupplyUnit))}updateSupply(){if(!this.isAlive())return!1;if(this.outOfSupply()){if(this.strength<2)this.die();else{for(let t=0;t<Math.ceil(this.strength/2);t++){const t=this.clone();t.strength=1,this.owner.availableUnits.add(t)}this.strength=Math.floor(this.strength/2)}return!0}return!1}canAttack(t=null){return super.canAttack(t)&&(null===t||t instanceof LandUnit)}canAttackInHex(t){const n=this.hex();return!(null===n||null!==this.embarkedOn()||null!==t.embarkedOn()||!super.canAttackInHex(t))&&(n.controller().partnership()===this.owner.partnership()?n.adjacentLandHexes().includes(t.hex()):n===t.hex())}modifiedLandAttack(){return null!==Countries.sovietUnion.enteredWar&&date.current<=Countries.sovietUnion.enteredWar+12&&(this.owner===Countries.sovietUnion||this.owner===Countries.finland)&&this.hex()?.weatherCondition()===WeatherCondition.SevereWinter?2*this.strength:this.strength}canEnterHexWithinStackingLimits(t,n=!1,e=t.units()){const r=[...e.filter((t=>t!==this&&t instanceof LandUnit))];return r.length-(r.some((t=>t instanceof SupplyUnit))?1:0)-(r.some((t=>t instanceof Paratrooper))?1:0)<2}validateMovement(t,n){const e=this.owner.partnership().opponent();return t.every(((n,e)=>0===e||n.adjacentLandHexes().includes(t[e-1])))&&this.validateMovementThroughNeutralCountries(t)&&!t.values().flatMap((t=>t.landUnits())).some((t=>t.owner.partnership()!==this.owner.partnership()))&&(!n||t.every((t=>t.canUseRail&&t.controller()?.partnership()===this.owner.partnership()))&&!this.hasAttacked)&&this.validateMovementThroughControlZones(t,new Set(t.filter((t=>t.isInLandControlZone(e)))),(t.at(-1)?.isForest()&&t.at(-2)?.isForest())??!1,n)&&(n||t.reduce(((t,n)=>t+n.landMovementPointCost()),-t[0].landMovementPointCost())<=this.movementAllowance)}canEmbarkOnto(t){return t.owner.partnership()===this.owner.partnership()&&(t instanceof TransportShip||t instanceof AirUnit)&&!t.damaged()&&(t instanceof TransportShip||this.strength<=1&&t instanceof AirUnit&&t.isTransportUnit()&&t.based)}sameTypeAndStrength(t){return t instanceof LandUnit&&this.sameType(t)&&this.strength===t.strength}sameBasicType(t){return t instanceof LandUnit&&t.owner.partnership()===this.owner.partnership()}modifiedDefense(){const t=this.hex();let n=this.strength;return null===t||(t.isTallMountain()?n*=2:(t.isMountain()||t.isForest())&&(n*=1.5),t.fortified()&&(n*=2),t.weatherCondition()!==WeatherCondition.Spring&&t.weatherCondition()!==WeatherCondition.Monsoon||(n*=2),null!==Countries.sovietUnion.enteredWar&&date.current<=Countries.sovietUnion.enteredWar+24&&(this.owner===Countries.sovietUnion||this.owner===Countries.finland)&&t.weatherCondition()===WeatherCondition.SevereWinter&&(n*=2),this.outOfSupply()&&(n/=2)),n}sameType(t){return this.owner===t.owner&&this.constructor===t.constructor&&this.movementAllowance===t.movementAllowance}maxStrength(){return this.movementAllowance<3?5:this.owner.maxLandUnitStrength()}canUseRail(t=[]){return(Phase.current===Phase.AxisSecondMovement||Phase.current===Phase.AlliedSecondMovement)&&[...this.owner.landUnits().filter((n=>n!==this&&(n.movingByRail||t.includes(n))))].length<this.owner.railCapacity()}toJson(){let t=super.toJson();return t.strength=this.strength,t.movementAllowance=this.movementAllowance,t.hasMoved=this.hasMoved||void 0,t}static validateLandUnitJson(t,n,e){if(!("movementAllowance"in t)||"number"!=typeof t.movementAllowance||t.movementAllowance<=0)return console.warn("Invalid land unit: invalid movement allowance."),!1;if(!("strength"in t)||"number"!=typeof t.strength)return console.warn("Invalid land unit: invalid strength."),!1;if("hasMoved"in t&&"boolean"!=typeof t.hasMoved)return console.warn("Invalid land unit: invalid hasMoved."),!1;switch(n){case"Armor":return t.strength>0&&t.strength<=e.maxArmorStrength()?Armor.validateArmorJson(t):(console.warn("Invalid armor: invalid strength: "+t.strength),!1);case"Infantry":case"Marine":return t.strength>0&&t.strength<=e.maxLandUnitStrength()||(console.warn("Invalid land unit: invalid strength: "+t.strength),!1);case"Paratrooper":return 1===t.strength||(console.warn("Invalid paratrooper: invalid strength: "+t.strength),!1);case"SupplyUnit":return 0===t.strength||(console.warn("Invalid supply unit: invalid strength: "+t.strength),!1);default:return console.warn("Invalid unit: invalid type."),!1}}}