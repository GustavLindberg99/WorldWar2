import{Hex,SupplyLines}from"../mapsheet.js";import{Partnership}from"../partnership.js";import{Countries,CountryWithUnits}from"../countries.js";import{AirUnit,Armor,Infantry,LandUnit,Marine,NavalUnit,Paratrooper,SupplyUnit}from"../units.js";class Unit{movementAllowance;owner;hasAttacked=!1;#e=null;#t=null;#n=new Set;static#r=new Map;constructor(e,t){this.movementAllowance=e,this.owner=t}static unitsInHex(e){return new Set(Unit.#r.get(e))}static allAliveUnits(){return[...Unit.#r.values().flatMap((e=>e)).flatMap((e=>[e,...e.embarkedUnits()]))].values()}static groupByType(e){const t=new Map;for(let n of e){const e=t.keys().find((e=>e.sameTypeAndStrength(n)));void 0===e?t.set(n,1):t.set(e,t.get(e)+1)}return t}hex(){return this.embarkedOn()?.hex()??this.#t}setHex(e){if(e===this.#t)return;const t=this.embarkedOn();null!==t&&t.#n.delete(this),this.#e=null,this.#i();const n=Unit.#r.get(e)??new Set;n.add(this),Unit.#r.set(e,n),this.#t=e,SupplyLines.clearCache()}#i(){const e=this.hex();if(null!==e){const t=Unit.#r.get(e);t.delete(this),0===t.size&&Unit.#r.delete(e)}}canDoOverrun(){return!1}embarkedOn(){return this.#e}embarkOnto(e){e!==this.embarkedOn()&&(null!==this.#t&&Unit.#r.get(this.#t)?.delete(this),e.#n.add(this),this.#t=null,this.#e=e,this.isAlive()&&SupplyLines.clearCache())}disembark(){const e=this.embarkedOn()?.hex()??null;null!==e&&this.setHex(e)}embarkedUnits(){return this.#n}delete(){null!==this.#e&&this.#e.#n.delete(this),this.#e=null,this.#i(),this.#t=null;for(let e of this.#n)e.delete();this.updateSupply(),SupplyLines.clearCache()}isAlive(){return null!==this.hex()}validateMovementThroughControlZones(e,t,n,r){const i=n&&!r?e.slice(0,-1):e;return i.every(((e,n)=>0===n||!t.has(e)||!t.has(i[n-1])))&&i.slice(1,-1).every((e=>!t.has(e)))}validateMovementThroughNeutralCountries(e){if(e.some((e=>e.controller()?.partnership()===Partnership.Neutral)))return!1;if(Countries.mongolia.partnership()===Partnership.Neutral&&Countries.japan.partnership()!==Countries.sovietUnion.partnership()){if(this.owner===Countries.sovietUnion)return e.every((e=>e.country!==Countries.japan&&e.country!==Countries.china));if(this.owner===Countries.japan)return e.every((e=>e.country!==Countries.sovietUnion))}return!0}canAttack(e){return!this.outOfSupply()&&(e?.owner.partnership()!==this.owner.partnership()&&!this.hasAttacked)}canAttackInHex(e){return!!this.canAttack(e)&&(Countries.mongolia.partnership()!==Partnership.Neutral||Countries.japan.partnership()===Countries.sovietUnion.partnership()||!(this.owner===Countries.japan&&e?.hex().country===Countries.sovietUnion||this.owner===Countries.sovietUnion&&e?.hex().country===Countries.japan))}toJson(){let e={type:this.constructor.name,owner:this.owner.name(),hasAttacked:this.hasAttacked||void 0};const t=this.hex();return null!==t&&(e.hex={x:t.x,y:t.y}),this.embarkedUnits().size>0&&(e.embarkedUnits=[...this.embarkedUnits().values().map((e=>e.toJson()))]),e}static validateJson(e){if("object"!=typeof e||null===e)return console.warn("Invalid unit."),!1;if(!("type"in e)||"string"!=typeof e.type)return console.warn("Invalid unit: missing type."),!1;if(!("owner"in e))return console.warn("Invalid unit: owner missing."),!1;if("hasAttacked"in e&&"boolean"!=typeof e.hasAttacked)return console.warn("Invalid unit: invalid hasAttacked."),!1;if(!(!("hex"in e)||"object"==typeof e.hex&&null!==e.hex&&"x"in e.hex&&"number"==typeof e.hex.x&&"y"in e.hex&&"number"==typeof e.hex.y&&void 0!==Hex.fromCoordinates(e.hex.x,e.hex.y)))return console.warn("Invalid unit: invalid hex."),!1;if("embarkedUnits"in e&&!(e.embarkedUnits instanceof Array&&e.embarkedUnits.every((e=>Unit.validateJson(e)))))return console.warn("Invalid unit: invalid embarkedUnits."),!1;if("outOfSupply"in e&&"boolean"!=typeof e.outOfSupply)return console.warn("Invalid unit: invalid outOfSupply."),!1;if("damaged"in e&&"boolean"!=typeof e.damaged)return console.warn("Invalid unit: invalid damaged."),!1;const t=Countries.fromName(e.owner);if(!(t instanceof CountryWithUnits))return console.warn("Invalid unit: invalid owner."),!1;switch(e.type){case"AirUnit":return AirUnit.validateAirUnitJson(e);case"Armor":case"Infantry":case"Marine":case"Paratrooper":case"SupplyUnit":return LandUnit.validateLandUnitJson(e,e.type,t);case"Battlecruiser":case"Battleship":case"Carrier":case"Convoy":case"DestroyerEscort":case"Destroyer":case"HeavyCruiser":case"Kaibokan":case"LightCruiser":case"Submarine":case"TransportShip":return NavalUnit.validateNavalUnitJson(e,e.type);default:return console.warn("Invalid unit: invalid type."),!1}}static fromJson(e){const t=Countries.fromName(e.owner);let n,r;switch(e.type){case"AirUnit":n=AirUnit.airUnitFromJson(e,t);break;case"Armor":n=r=Armor.armorFromJson(e,t);break;case"Infantry":n=r=new Infantry(e.strength,e.movementAllowance,t);break;case"Marine":n=r=new Marine(e.strength,e.movementAllowance,t);break;case"Paratrooper":n=r=new Paratrooper(e.strength,e.movementAllowance,t);break;case"SupplyUnit":n=r=SupplyUnit.supplyUnitFromJson(e,t);break;case"Battlecruiser":case"Battleship":case"Carrier":case"Convoy":case"DestroyerEscort":case"Destroyer":case"HeavyCruiser":case"Kaibokan":case"LightCruiser":case"Submarine":case"TransportShip":n=NavalUnit.navalUnitFromJson(e,t);break;default:throw new TypeError("Unknown unit type")}void 0!==r&&(r.hasMoved=e.hasMoved??!1),n.hasAttacked=e.hasAttacked??!1,void 0!==e.hex&&n.setHex(Hex.fromCoordinates(e.hex.x,e.hex.y));for(let t of e.embarkedUnits??[]){Unit.fromJson(t).embarkOnto(n)}return n instanceof AirUnit&&void 0!==e.hex&&e.based&&(n.based=!0),n instanceof NavalUnit&&void 0!==e.hex&&e.inPort&&(n.inPort=!0),n}}export default Unit;