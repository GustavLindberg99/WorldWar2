import LandUnit from"../land-unit.js";import{WeatherCondition}from"../../mapsheet.js";import{Phase}from"../../phase.js";export default class Armor extends LandUnit{hasDoneSuccessfulOverrun=!1;#e=!1;type(){return"Land unit (Armor)"}price(){return 200*this.strength}delay(){return 3}outOfSupply(){return this.#e&&super.outOfSupply()}updateSupply(){const e=super.updateSupply();return this.#e=super.outOfSupply(),e}maxStrength(){return this.owner.maxArmorStrength()}canDoOverrun(){const e=this.hex();return null!==e&&e.weatherCondition()!==WeatherCondition.Spring&&e.weatherCondition()!==WeatherCondition.Monsoon}clone(){return new Armor(this.strength,this.movementAllowance,this.owner)}validateMovement(e,r){return e.every((e=>!e.isDesert()&&!e.isIcecap()))&&super.validateMovement(e,r)}validateMovementThroughControlZones(e,r,t,n){return!(!this.hasDoneSuccessfulOverrun||Phase.current!==Phase.AxisFirstMovement&&Phase.current!==Phase.AlliedFirstMovement||n)||super.validateMovementThroughControlZones(e,r,!0,n)}toJson(){let e=super.toJson();return e.outOfSupply=this.#e||void 0,e.hasDoneSuccessfulOverrun=this.hasDoneSuccessfulOverrun||void 0,e}static validateArmorJson(e){return"outOfSupply"in e&&"boolean"!=typeof e.outOfSupply?(console.warn("Invalid armor: invalid outOfSupply."),!1):!("hasDoneSuccessfulOverrun"in e)||"boolean"==typeof e.hasDoneSuccessfulOverrun||(console.warn("Invalid armor: invalid hasDoneSuccessfulOverrun."),!1)}static armorFromJson(e,r){const t=new Armor(e.strength,e.movementAllowance,r);return t.#e=e.outOfSupply??!1,t.hasDoneSuccessfulOverrun=e.hasDoneSuccessfulOverrun??!1,t}}