import{addToMapOfSets}from"../../../utils.js";import CountryWithUnits from"../country-with-units.js";import{Hex}from"../../mapsheet.js";import{Partnership}from"../../partnership.js";import{Countries}from"../../countries.js";import{Infantry}from"../../units.js";import{date}from"../../date.js";export default class Finland extends CountryWithUnits{constructor(){super(Partnership.Neutral),this.availableUnits=new Set(new Array(25).fill(null).map((()=>new Infantry(1,3,this))))}canBeInvadedBy(e){return!1}canSendMoneyWithoutConvoys(){return[Countries.germany,Countries.unitedKingdom].filter((e=>e.partnership()===this.partnership()&&!e.conquered()))}name(){return"Finland"}color(){return"#9e4454"}canSurrender(e){return e===Countries.sovietUnion.partnership()&&[...Countries.germany.cities,...Countries.poland.cities.filter((e=>e.secondaryController!==Countries.sovietUnion))].some((e=>e.controller()===Countries.sovietUnion))&&Countries.sovietUnion.landUnits().filter((e=>e.hex()?.country===this)).reduce(((e,t)=>e+t.strength),0)>=20}surrender(){this.makeNeutral(),this.availableUnits=new Set,this.delayedUnits=new Map;for(let e of Hex.allHexes)if(e.country===this)if(e.secondaryController===Countries.sovietUnion)e.setController(Countries.sovietUnion);else{e.setController(this);for(let t of e.landUnits().filter((e=>e.owner!==Countries.sovietUnion)))t.die();for(let t of e.units())t.delete(),addToMapOfSets(t.owner.delayedUnits,date.current,t)}else e.controller()===this&&e.setController(Countries.sovietUnion)}}