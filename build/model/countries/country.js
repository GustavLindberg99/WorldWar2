import{addToMapOfSets}from"../../utils.js";import{Countries}from"../countries.js";import{date,Month}from"../date.js";import{Hex}from"../mapsheet.js";import{Partnership}from"../partnership.js";import{Convoy,Unit}from"../units.js";import UnitContainer from"../unit-container.js";class Country extends UnitContainer{money=0;gotMoneyFromConvoys=!1;cities=[];hexes=[];enteredWar=null;atomicBombCount=0;surrenderedFromAtomicBomb=null;hasUsedAtomicBombThisTurn=!1;#e=Partnership.Neutral;#n;#r=!1;#t=!1;delayedUnits=new Map;availableUnits=new Set;constructor(e){super(),this.#n=e}addNewAvailableUnits(){}capital(){return this.cities.find((e=>e.isCapital))}partnership(){return this.#e}joinPartnership(e){if(this.partnership()===Partnership.Neutral){e===Partnership.Axis&&(this.#r=!1),this.#e=this.#n=e,this.enteredWar=date.current,this.delayedUnits.set(date.current,this.availableUnits),this.availableUnits=new Set;for(let n of this.additionalInvadedCountries(e.opponent()))n.joinPartnership(e)}}makeNeutral(){this.#e=Partnership.Neutral,this.#n=Partnership.Neutral,this.money=0;for(let e of[...this.units()])e.die()}conquered(){return this.#r}hasBeenConquered(){return this.#t}conquerOrLiberate(){this.shouldBeConquered()&&!this.#r?this.conquer():this.shouldBeLiberated()&&this.#r&&this.liberate()}conquer(){this.money=0;if(this!==Countries.china&&this.partnership()!==Partnership.Neutral)for(let e of Hex.allHexes)if(e.controller()===this){const n=this.capital().controller(),r=Countries.all().filter((e=>!e.conquered()&&e.partnership()===this.partnership())).toSorted(((e,n)=>[...n.units()].length-[...e.units()].length))[0],[t]=e.landUnits();if(void 0!==t)e.setController(t.owner);else if(e.country===this){const r=Countries.denmark,t=Countries.belgium;if(e.isColony&&this===r){if(e.setController(e.secondaryController),e.secondaryController===Partnership.Neutral)for(let n of e.units())n.delete(),addToMapOfSets(n.owner.delayedUnits,date.current,n)}else e.isColony&&this===t?e.setController(Countries.unitedKingdom):e.setController(n)}else e.setController(r??n)}for(let e of Unit.allAliveUnits().filter((e=>e instanceof Convoy)))e.destination===this&&(e.destination=e.owner);this.#r=!0,this.#t=!0}liberate(){for(let e of this.hexes)e.landUnits().some((e=>e.owner.partnership()!==this.partnership()))||e.setController(this);this.#r=!1}remainingCitiesBeforeConqured(){const e=[Countries.belgium,Countries.denmark,Countries.italy];return this.cities.filter((n=>!(n.controller().partnership()!==this.partnership()||n.isColony&&e.includes(this))))}shouldBeConquered(){return null!==this.surrenderedFromAtomicBomb||0===this.remainingCitiesBeforeConqured().length}shouldBeLiberated(){return null===this.surrenderedFromAtomicBomb&&this.cities.every((e=>e.controller().partnership()===this.partnership()||e.isColony))}canBeInvadedBy(e){const n=[Countries.tibet,Countries.mongolia,Countries.afghanistan,Countries.sovietUnion];return this.partnership()===Partnership.Neutral&&this.#n!==e&&this.cities.some((e=>e.controller()===this))&&(e===Partnership.Axis||n.includes(this)||Countries.all().some((n=>n.partnership()===e&&n!==Countries.china)))}additionalInvadedCountries(e){let n=[Countries.unitedKingdom,Countries.canada,Countries.australia,Countries.newZealand];null===Countries.france.enteredWar&&n.push(Countries.france);const r=[Countries.belgium,Countries.denmark,Countries.estonia,Countries.greece,Countries.latvia,Countries.lithuania,Countries.norway,Countries.poland,Countries.romania,Countries.sweden,Countries.yugoslavia];return n.includes(this)||r.includes(this)?n.filter((n=>n!==this&&n.canBeInvadedBy(e))):[]}canBeActivated(e){return!1}hasAtomicBomb(){return!1}income(){return 50*Hex.allResourceHexes.filter((e=>e.controller()===this&&!e.resourceHexDestroyed)).length}maxMoneyExchange(){return this.money}canSendMoneyWithoutConvoys(){return[]}canSendMoneyWithConvoys(){return[]}homelandResourceHexes(){return Hex.allResourceHexes.filter((e=>e.country===this&&e.controller()===this&&!e.isColony&&!e.resourceHexDestroyed))}isEnemy(e){return this.partnership()!==e&&this.partnership()!==Partnership.Neutral&&e!==Partnership.Neutral}railCapacity(){return 0}toJson(){let e={name:this.name(),money:this.money,partnership:this.#e?.name,preferredPartnership:this.#n?.name,gotMoneyFromConvoys:this.gotMoneyFromConvoys||void 0,enteredWar:this.enteredWar??void 0,atomicBombCount:this.atomicBombCount||void 0,surrenderedFromAtomicBomb:this.surrenderedFromAtomicBomb?.name(),hasUsedAtomicBombThisTurn:this.hasUsedAtomicBombThisTurn||void 0,conquered:this.#r||void 0,hasBeenConquered:this.#t||void 0};this.delayedUnits.size>0&&(e.delayedUnits=[...this.delayedUnits].map((([e,n])=>[e,[...n.values().map((e=>e.toJson()))]]))),this.availableUnits.size>0&&(e.availableUnits=[...this.availableUnits.values().map((e=>e.toJson()))]);const n=[...this.units().filter((e=>null===e.embarkedOn())).map((e=>e.toJson()))];return n.length>0&&(e.units=n),e}static validateJson(e){const n=["Axis","Allies","Neutral"];return"object"!=typeof e||null===e?(console.warn("Invalid country."),!1):"name"in e&&null!==Countries.fromName(e.name)?"money"in e&&"number"==typeof e.money?"partnership"in e&&!n.includes(e.partnership)?(console.warn(`Invalid country ${e.name}: invalid partnership.`),!1):"preferredPartnership"in e&&!n.includes(e.preferredPartnership)?(console.warn(`Invalid country ${e.name}: invalid preferred partnership.`),!1):!("delayedUnits"in e)||e.delayedUnits instanceof Array&&e.delayedUnits.every((n=>n instanceof Array&&2===n.length&&"number"==typeof n[0]&&n[1]instanceof Array&&n[1].every((n=>Unit.validateJson(n)&&n.owner===e.name&&!("hex"in n)&&(void 0===n.strength||n.strength<=1)))))?!("availableUnits"in e)||e.availableUnits instanceof Array&&e.availableUnits.every((n=>Unit.validateJson(n)&&n.owner===e.name&&!("hex"in n)&&(void 0===n.strength||n.strength<=1)))?!("liberatedForces"in e)||e.liberatedForces instanceof Array&&e.liberatedForces.every((n=>Unit.validateJson(n)&&n.owner===e.name&&!("hex"in n)&&"Infantry"===n.type&&1===n.strength))?!("units"in e)||e.units instanceof Array&&e.units.every((n=>Unit.validateJson(n)&&n.owner===e.name&&"hex"in n))?"gotMoneyFromConvoys"in e&&"boolean"!=typeof e.gotMoneyFromConvoys?(console.warn(`Invalid country ${e.name}: invalid gotMoneyFromConvoys.`),!1):!("enteredWar"in e)||"number"==typeof e.enteredWar&&e.enteredWar>=date(1937,Month.June)?!("atomicBombCount"in e)||"number"==typeof e.atomicBombCount&&e.atomicBombCount>=0?"surrenderedFromAtomicBomb"in e&&null===Countries.fromName(e.surrenderedFromAtomicBomb)?(console.warn(`Invalid country ${e.name}: invalid surrenderedFromAtomicBomb.`),!1):"hasUsedAtomicBombThisTurn"in e&&"boolean"!=typeof e.hasUsedAtomicBombThisTurn?(console.warn(`Invalid country ${e.name}: invalid hasUsedAtomicBombThisTurn.`),!1):"conquered"in e&&"boolean"!=typeof e.conquered?(console.warn(`Invalid country ${e.name}: invalid conquered.`),!1):"hasBeenConquered"in e&&"boolean"!=typeof e.hasBeenConquered?(console.warn(`Invalid country ${e.name}: invalid hasBeenConquered.`),!1):"hasAttemptedVichy"in e&&"boolean"!=typeof e.hasAttemptedVichy?(console.warn(`Invalid country ${e.name}: invalid hasAttemptedVichy.`),!1):"hasAttemptedActivation"in e&&"boolean"!=typeof e.hasAttemptedActivation?(console.warn(`Invalid country ${e.name}: invalid hasAttemptedActivation.`),!1):!("hasReceivedExtraArmor"in e)||"boolean"==typeof e.hasReceivedExtraArmor||(console.warn(`Invalid country ${e.name}: invalid hasReceivedExtraArmor.`),!1):(console.warn(`Invalid country ${e.name}: invalid atomic bomb count.`),!1):(console.warn(`Invalid country ${e.name}: invalid enteredWar.`),!1):(console.warn(`Invalid country ${e.name}: invalid units.`),!1):(console.warn(`Invalid country ${e.name}: invalid liberated forces.`),!1):(console.warn(`Invalid country ${e.name}: invalid available units.`),!1):(console.warn(`Invalid country ${e.name}: invalid delayed units.`),!1):(console.warn(`Invalid country ${e.name}: invalid money.`),!1):(console.warn("Invalid country: invalid name."),!1)}loadFromJson(e){this.money=e.money,this.#e=Partnership[e.partnership??"Neutral"],this.#n=Partnership[e.preferredPartnership??"Neutral"],this.delayedUnits=new Map(e.delayedUnits?.map((([e,n])=>[e,new Set(n.map((e=>Unit.fromJson(e))))]))),this.availableUnits=new Set(e.availableUnits?.map((e=>Unit.fromJson(e))));for(let n of e.units??[])Unit.fromJson(n);this.gotMoneyFromConvoys=e.gotMoneyFromConvoys??!1,this.enteredWar=e.enteredWar??null,this.atomicBombCount=e.atomicBombCount??0,this.surrenderedFromAtomicBomb=Countries.fromName(e.surrenderedFromAtomicBomb),this.hasUsedAtomicBombThisTurn=e.hasUsedAtomicBombThisTurn??!1,this.#r=e.conquered??!1,this.#t=e.hasBeenConquered??!1}}export default Country;